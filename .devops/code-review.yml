# Automatically triggered on PR
# Only triggers on branches
pr:
  autoCancel: true

trigger:
  branches:
    exclude:
      - master
parameters:
  - name: 'SUBSCRIPTION'
    displayName: 'Azure subscription hosting the infrastructure built with terraform'
    type: string
    default: PROD-IO-SERVICE-CONN
    values:
      - PROD-IO-SERVICE-CONN
      - DEV-IO-SERVICE-CONN

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: install_and_run_terraform
    steps:
      - template: template.yaml
        parameters:
          subscription: '${{ parameters.SUBSCRIPTION }}'
        # 3. Install SSH key
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: 'github.com'
          sshKeySecureFile: 'id_ed25519'
      # 4. Run terragrunt plan
      - task: AzureCLI@2
        env:
          GIT_BRANCH: $(Build.SourceBranchName)
        displayName: Run terragrunt plans
        inputs:
          azureSubscription: '${{ parameters.SUBSCRIPTION }}'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          failOnStandardError: false
          inlineScript: |
            RED='\033[0;31m'
            NC='\033[0m' # No Color

            export ARM_CLIENT_ID=$(CLIENT_ID)
            export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(TENANT_ID)

            base_dir=$(pwd)
            current_branch=${GIT_BRANCH}
            echo "Current branch ${current_branch}"

            # Get new files or changed in the current branch
            file_changed=$(git diff --diff-filter=AM --name-only origin/master | grep terragrunt.hcl)

            # task output status code
            output_status_code=0

            for item in ${file_changed}
            do
              cd ${base_dir}
              wdir=$(dirname $item)

              echo "Processing ${item}"

              cd ${wdir}
              terragrunt plan

              # if plan fails and output_status_code is 0
              # set output_status_code to 1 (error)
              if [[ $? -ne 0 ]]; then
                echo -e "${RED}${wdir} plan failed${NC}"
                if [[ ${output_status_code} -eq 0 ]]; then
                  output_status_code=1
                fi
              fi
            done

            # get file deleted in the current branch.
            file_deleted=$(git diff --diff-filter=D --name-only origin/master | grep terragrunt.hcl)

            if [ -z ${file_deleted} ]; then
              git fetch
              git checkout master
            fi

            for item in ${file_deleted}
            do
              echo "Deleted file: ${item}."
              terragrunt plan -destroy

              if [[ $? -ne 0 ]]; then
                echo -e "${RED}${wdir} plan failed${NC}"
                if [[ ${output_status_code} -eq 0 ]]; then
                  output_status_code=1
                fi
              fi

            done

            exit ${output_status_code}
