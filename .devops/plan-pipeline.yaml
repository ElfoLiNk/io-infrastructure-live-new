# Automatically triggered on PR
# Only triggers on branches
pr:
  autoCancel: true
  branches:
    exclude:
     - '*'

trigger:
  branches:
    exclude:
      - master
  paths:
    include:
      - 'prod/*'

parameters:
  - name: 'SUBSCRIPTION'
    displayName: 'Azure subscription hosting the infrastructure built with terraform'
    type: string
    default: PROD-IO-SERVICE-CONN
    values:
      - PROD-IO-SERVICE-CONN
      - DEV-IO-SERVICE-CONN
  - name: 'AZURERM_PROVIDER_CUSTOM_VERSION'
    displayName: 'Azure provider version to download a custom provider'
    type: string
    default: 2.46.1
  - name: 'AZURERM_PROVIDER_CUSTOM_RELEASE'
    displayName: 'Azure provider version to download a custom provider'
    type: string
    default: v2.46-beta.1

pool:
  vmImage: 'ubuntu-latest'


resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v5
      endpoint: 'pagopa'

jobs:
  - job: terraform_plan
    steps:
      # 1. Install terraform and terragrunt
      - template: templates/terraform-setup/template.yaml@terraform
      # 2. Install custom provider (tmp)
      #    TODO: remove this task as soon as the provider will be fixed
      - task: Bash@3
        displayName: Install custom provider
        condition: ne('${{ parameters.AZURERM_PROVIDER_CUSTOM_VERSION }}', '')
        inputs:
          targetType: 'inline'
          failOnStderr: true
          script: |
            export TERRAFORM_CACHE_DIR='.terraform.d/plugin-cache/registry.terraform.io/hashicorp/azurerm/${{ parameters.AZURERM_PROVIDER_CUSTOM_VERSION }}/linux_amd64'
            mkdir -p ~/${TERRAFORM_CACHE_DIR}
            wget https://github.com/uolter/terraform-provider-azurerm/releases/download/${{ parameters.AZURERM_PROVIDER_CUSTOM_RELEASE }}/terraform-provider-azurerm
            chmod +x terraform-provider-azurerm
            mv terraform-provider-azurerm ~/${TERRAFORM_CACHE_DIR}/terraform-provider-azurerm_v${{ parameters.AZURERM_PROVIDER_CUSTOM_VERSION }}

      # 3. Install SSH key
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: 'github.com'
          sshKeySecureFile: 'id_ed25519'
      # 4. Run terragrunt plan
      - task: AzureCLI@2
        env:
          GIT_BRANCH: $(Build.SourceBranchName)
        displayName: Run terragrunt plans
        inputs:
          azureSubscription: '${{ parameters.SUBSCRIPTION }}'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          failOnStandardError: false
          inlineScript: |
            RED='\033[0;31m'
            NC='\033[0m' # No Color

            export ARM_CLIENT_ID=$(CLIENT_ID)
            export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(TENANT_ID)

            # download terraform providers and modules once.
            export TF_PLUGIN_CACHE_DIR=~/.terraform.d/plugin-cache/
            export TERRAGRUNT_DOWNLOAD=~/.terragrunt-cache/

            # task output status code
            output_status_code=0

            checkerror() {
              # parameters:
              # $1: status code of the last command.
              # $2: terragrunt module path.
              if [[ $1 -ne 0 ]]; then
                echo -e "${RED}$2 plan failed${NC}"
                output_status_code=1
              fi
            }

            base_dir=$(pwd)
            current_branch=${GIT_BRANCH}
            echo "Current branch ${current_branch}"

            # Get new files or changed in the current branch
            file_changed=$(git diff --diff-filter=AM --name-only origin/master | grep '.hcl\|.xml\|.tmpl')

            for item in ${file_changed}
            do
              cd ${base_dir}
              # get working dir ... where to run the apply.
              wdir=$(dirname $item)

              echo "Processing ${item}"

              # do not check config files.
              if ! [[ ${item} =~ "vars.hcl" ]]; then
                cd ${wdir}
                # TODO init command is not required when you use standard providers.
                terragrunt init
                terragrunt plan

                # if plan fails and output_status_code is 0
                # set output_status_code to 1 (error)
                checkerror $? ${item}
              fi

            done

            # get file deleted in the current branch.
            file_deleted=$(git diff --diff-filter=D --name-only origin/master | grep terragrunt.hcl)

            if [ ${#file_deleted} -gt 0 ]; then
              git fetch
              git checkout master
            fi

            for item in ${file_deleted}
            do
              cd ${base_dir}
              wdir=$(dirname $item)
              echo "Processing ${item}"

              cd ${wdir}
              # TODO init command is not required when you use standard providers.
              terragrunt init
              terragrunt plan -destroy
              checkerror $? ${item}
            done

            exit ${output_status_code}
